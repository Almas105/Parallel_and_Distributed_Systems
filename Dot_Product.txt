#include <stdio.h>

__global__ void dotproduct(int *a,int *b,int *c)
{
int i=threadIdx.x;
atomicAdd(c,a[i]*b[i]);
if(threadIdx.x==0)
printf("\nDot Product %d", *c);
}

int main()
{
int N=5;
int ha[N],hb[N],hc=0;
int *da,*db,*dc;
cudaMalloc((void**)&da,N*sizeof(int));
cudaMalloc((void**)&db,N*sizeof(int));
cudaMalloc((void**)&dc,sizeof(int));

for(int i=0;i<N;i++){
ha[i]=1;
hb[i]=1;
}
cudaMemcpy(da,ha,sizeof(int)*N,cudaMemcpyHostToDevice);
cudaMemcpy(db,hb,sizeof(int)*N,cudaMemcpyHostToDevice);
cudaMemcpy(dc,hc,sizeof(int),cudaMemcpyHostToDevice);

dotproduct<<<1,N>>>(da,db,dc);

cudaMemcpy(&hc,dc,sizeof(int),cudaMemcpyDeviceToHost);
cudaFree(da);
cudaFree(db);
cudaFree(dc);
}